#!/usr/bin/env python

'''
hdaps-gl - draw a laptop based on the hdaps position
'''

# Copyright: 2008-2009 Evgeni Golov <sargentd@die-welt.net>
# License: GPL-2
#
# The model of the simple laptop is created by
# Patrick Kilian <petschge@petschge.de>
# and licensed under GPL-2

import OpenGL
OpenGL.ERROR_CHECKING = False
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
from time import sleep
import sys
from hdaps import *

oldX = 0
oldY = 0
calibX = 0
calibY = 0
WIDTH = 640
HEIGHT = 480

def drawLaptop( posX=0, posY=0, laptop=(0, 0, 0), screen=(0, 0, 1), trackpoint=(1, 0, 0), N=5 ):
    glClear (GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);
    glPushMatrix ();
    try:
        glRotated (posX / 2.0, 0.0, 0.0, -1.0);
        glRotated (posY / 2.0, 1.0, 0.0, 0.0);

        glBegin (GL_QUADS);     # start drawing the laptop.

        # top of body
        glColor3fv (laptop);
        glVertex3d (N*1.0, N*0.0, N*1.6);
        glVertex3d (N*(-1.0), N*0.0, N*1.6);
        glVertex3d (N*(-1.0), N*0.0, N*0.0);
        glVertex3d (N*1.0, N*0.0, N*0.0);

        # trackpoint
        glColor3fv (trackpoint);
        glVertex3d (N*0.01, N*0.01, N*0.78);
        glVertex3d (N*0.01, N*0.01, N*0.82);
        glVertex3d (N*(-0.01), N*0.01, N*0.82);
        glVertex3d (N*(-0.01), N*0.01, N*0.78);

        glColor3fv (laptop);
        glVertex3d (N*1.0, N*(-0.1), N*(-0.1));
        glVertex3d (N*-1.0, N*-0.1, N*(-0.1));
        glVertex3d (N*-1.0, N*-0.1, N*1.6);
        glVertex3d (N*1.0, N*-0.1, N*1.6);

        # front of body
        glColor3fv (laptop);
        glVertex3d (N*1.0, N*0.0, N*1.6);
        glVertex3d (N*-1.0, N*0.0, N*1.6);
        glVertex3d (N*-1.0, N*-0.1, N*1.6);
        glVertex3d (N*1.0, N*-0.1, N*1.6);

        # left of body
        glColor3fv (laptop);
        glVertex3d (N*-1.0, N*0.0, N*1.6);
        glVertex3d (N*-1.0, N*0.0, N*0.0);
        glVertex3d (N*-1.0, N*-0.1, N*0.0);
        glVertex3d (N*-1.0, N*-0.1, N*1.6);

        # Right of body
        glColor3fv (laptop);
        glVertex3d (N*1.0, N*0.0, N*0.0);
        glVertex3d (N*1.0, N*0.0, N*1.6);
        glVertex3d (N*1.0, N*-0.1, N*1.6);
        glVertex3d (N*1.0, N*-0.1, N*0.0);

        # top of screen
        glColor3fv (laptop);
        glVertex3d (N*1.0, N*1.6, N*-0.1);
        glVertex3d (N*-1.0, N*1.6, N*-0.1);
        glVertex3d (N*-1.0, N*1.6, N*0.0);
        glVertex3d (N*1.0, N*1.6, N*0.0);
        
        # front of screen
        glColor3fv (laptop);
        glVertex3d (N*1.0, N*1.6, N*0.0);
        glVertex3d (N*-1.0, N*1.6, N*0.0);
        glVertex3d (N*-1.0, N*0.0, N*0.0);
        glVertex3d (N*1.0, N*0.0, N*0.0);

        # screen
        glColor3fv (screen);
        glVertex3d (N*0.9, N*1.5, N*0.01);
        glVertex3d (N*-0.9, N*1.5, N*0.01);
        glVertex3d (N*-0.9, N*0.1, N*0.01);
        glVertex3d (N*0.9, N*0.1, N*0.01);
        
        # back of screen
        glColor3fv (laptop);
        glVertex3d (N*1.0, N*-0.1, N*-0.1);
        glVertex3d (N*-1.0, N*-0.1, N*-0.1);
        glVertex3d (N*-1.0, N*1.6, N*-0.1);
        glVertex3d (N*1.0, N*1.6, N*-0.1);

        # left of screen
        glColor3fv (laptop);
        glVertex3d (N*-1.0, N*1.6, N*0.0);
        glVertex3d (N*-1.0, N*1.6, N*-0.1);
        glVertex3d (N*-1.0, N*-0.1, N*-0.1);
        glVertex3d (N*-1.0, N*-0.1, N*0.0);

        # Right of screen
        glColor3fv (laptop);
        glVertex3d (N*1.0, N*1.6, N*-0.1);
        glVertex3d (N*1.0, N*1.6, N*0.0);
        glVertex3d (N*1.0, N*-0.1, N*0.0);
        glVertex3d (N*1.0, N*-0.1, N*-0.1);
        glEnd ();
    finally:
        glPopMatrix ();
        glutSwapBuffers ();
        
def forceUpdateWindow(arg):
	updateWindow(True)
	
def updateWindow(update=False):
	global oldX,oldY
	posX,posY = readPosition()
	if (abs(posX - oldX) > 5 or abs(posY - oldY) > 5):
		update = True
	if (abs(posX) < 5 or abs(posY) < 5):
		posX=0
		posY=0
		update=True
	if update:
		drawLaptop(posX-calibX, posY-calibY)
	oldX=posX
	oldY=posY
	sleep(0.05)
	
def main():
	global calibX,calibY
	calibX,calibY=readPosition(True)
	glutInit(sys.argv)
	glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH)
	glutInitWindowSize (WIDTH, HEIGHT);
	glutInitWindowPosition (0, 0);
	glutCreateWindow('HDAPS-GL')
	glutDisplayFunc(updateWindow)
	glutIdleFunc(updateWindow)
	glutVisibilityFunc(forceUpdateWindow)
	glClearColor (0.5, 0.5, 0.5, 0.0);
	glClearDepth (1.0);	# Enables Clearing Of The Depth Buffer
	glDepthFunc (GL_LESS);	# The Type Of Depth Test To Do
	glEnable (GL_DEPTH_TEST);	# Enables Depth Testing
	glShadeModel (GL_SMOOTH);	# Enables Smooth Color Shading

	glMatrixMode (GL_PROJECTION);
	glLoadIdentity ();
	gluPerspective (45.0, float(WIDTH) / float(HEIGHT), 0.25, 100.0);

	glMatrixMode (GL_MODELVIEW);
	glLoadIdentity ();
	gluLookAt(
		0,1,20, # eyepoint
		0,0,0, # center-of-view
		0,1,0, # up-vector
	)
	#glTranslated (10.0, -0.5, -1.0);

	drawLaptop(0,0)
	glutMainLoop()

if __name__ == "__main__":
	main()
